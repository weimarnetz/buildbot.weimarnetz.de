# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['buildbotNetUsageData'] = None
####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("m18", "subbsigg"),worker.Worker("webis3","subbsigg")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        project='weimarnetz firmware',
        repourl='git://github.com/weimarnetz/firmware.git',
        workdir='gitpoller-weimarnetz', branch='master',
        pollinterval=300))

#c['change_source'].append(changes.GitPoller(
#        project='firmware builder',
#        repourl='git://github.com/weimarnetz/firmware.git',
#        workdir='gitpoller-firmware', branch='master',
#        pollinterval=300))

#c['change_source'].append(changes.GitPoller(
#        project='packages',
#        repourl='git://github.com/weimarnetz/packages.git',
#        workdir='gitpoller-packages', branch='master',
#        pollinterval=300))

targets = [
        "ar71xx",
        "ar71xx_tiny",
        "mpc85xx",
        "ramips_mt7620",
        "ramips_mt7621",
        "ramips_mt76x8",
        "x86"
]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=10,
                            builderNames=targets))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=targets))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

@util.renderer
def cmd_make_command(props):
    command = ['nice', 'make']
    cpus = props.getProperty('cpus_per_build')
    if cpus:
        command.extend(['-j', str(cpus+1)])
    else:
        command.extend(['-j', '4'])
    command.extend(["TARGET=" + props.getProperty('buildername')])
    return command


cmd_make = steps.ShellCommand(
    command=cmd_make_command,
    haltOnFailure=True
    )

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='git://github.com/weimarnetz/firmware.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(steps.ShellCommand(command=cmd_make_command))

def create_builder_config(target):
    return util.BuilderConfig(
        name=target,
        workernames=['m18','webis3'],
        factory=factory
    )

c['builders'] = list(map(create_builder_config, targets))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Weimarnetz Builder"
c['titleURL'] = "https://buildbot.weimarnetz.de/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://buildbot.weimarnetz.de/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

####### Auth
c['www']['authz'] = util.Authz(
               allowRules = [
                              util.AnyControlEndpointMatcher(role="admins")
                                     ],
                      roleMatchers = [
                                     util.RolesFromUsername(roles=['admins'], usernames=['admin'])
                                            ]
                      )
c['www']['auth'] = util.UserPasswordAuth({'admin': '<pw>'})
